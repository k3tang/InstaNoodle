{"ast":null,"code":"import csrfFetch from './csrf';\nconst SET_CURRENT_USER = 'session/setCurrentUser';\nconst REMOVE_CURRENT_USER = 'session/removeCurrentUser';\n\nconst setCurrentUser = user => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: user\n  };\n};\n\nconst removeCurrentUser = () => {\n  return {\n    type: REMOVE_CURRENT_USER\n  };\n};\n\nconst storeCSRFToken = response => {\n  const csrfToken = response.headers.get('X-CSRF-Token');\n  if (csrfToken) sessionStorage.setItem('X-CSRF-Token', csrfToken);\n};\n\nconst storeCurrentUser = user => {\n  if (user) sessionStorage.setItem('currentUser', JSON.stringify(user));else sessionStorage.removeItem('currentUser');\n};\n\nexport const login = user => async dispatch => {\n  const {\n    email,\n    password\n  } = user;\n  const response = await csrfFetch('api/session', {\n    method: 'POST',\n    body: JSON.stringify({\n      email,\n      password\n    })\n  });\n  const data = await response.json();\n  dispatch(setCurrentUser(data.user));\n  return response;\n};\nexport const signup = user => async dispatch => {\n  const {\n    name,\n    email,\n    password\n  } = user;\n  const response = await csrfFetch('api/users', {\n    method: 'POST',\n    body: JSON.stringify({\n      name,\n      email,\n      password\n    })\n  });\n  const data = await response.json();\n  storeCurrentUser(data.user);\n  dispatch(setCurrentUser(data.user));\n  return response;\n};\nexport const logout = () => async dispatch => {\n  const response = await csrfFetch('api/session', {\n    method: 'DELETE'\n  });\n  storeCurrentUser(null);\n  dispatch(removeCurrentUser());\n  return response;\n};\nexport const restoreSession = () => async dispatch => {\n  const response = await csrfFetch('api/session');\n  storeCSRFToken(response);\n  const data = await response.json();\n  storeCurrentUser(data.user);\n  dispatch(setCurrentUser(data.user));\n  return response;\n};\nconst initialState = {\n  user: JSON.parse(sessionStorage.getItem('currentUser'))\n};\n\nconst sessionReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case SET_CURRENT_USER:\n      return { ...state,\n        user: action.payload\n      };\n\n    case REMOVE_CURRENT_USER:\n      return { ...state,\n        user: null\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default sessionReducer;","map":{"version":3,"names":["csrfFetch","SET_CURRENT_USER","REMOVE_CURRENT_USER","setCurrentUser","user","type","payload","removeCurrentUser","storeCSRFToken","response","csrfToken","headers","get","sessionStorage","setItem","storeCurrentUser","JSON","stringify","removeItem","login","dispatch","email","password","method","body","data","json","signup","name","logout","restoreSession","initialState","parse","getItem","sessionReducer","state","action"],"sources":["/Users/karentang/Desktop/App_Academy/InstaNoodles/frontend/src/store/session.js"],"sourcesContent":["import csrfFetch from './csrf';\n\nconst SET_CURRENT_USER = 'session/setCurrentUser';\nconst REMOVE_CURRENT_USER = 'session/removeCurrentUser';\n\nconst setCurrentUser = (user) => { \n    return {\n        type: SET_CURRENT_USER,\n        payload: user\n    };\n};\n\nconst removeCurrentUser = () => {\n    return {\n        type: REMOVE_CURRENT_USER\n    };\n};\n\nconst storeCSRFToken = response => {\n    const csrfToken = response.headers.get('X-CSRF-Token')\n    if (csrfToken) sessionStorage.setItem('X-CSRF-Token', csrfToken);\n}\n\nconst storeCurrentUser = user => {\n    if (user) sessionStorage.setItem('currentUser', JSON.stringify(user));\n    else sessionStorage.removeItem('currentUser');\n}\n\nexport const login = (user) => async (dispatch) => {\n    const {email, password} = user;\n    const response = await csrfFetch('api/session', {\n        method: 'POST',\n        body: JSON.stringify({\n            email,\n            password\n        })\n    });\n\n    const data = await response.json();\n    dispatch(setCurrentUser(data.user));\n    return response;\n};\n\nexport const signup = (user) => async (dispatch) => {\n    const {name, email, password} = user;\n    const response = await csrfFetch('api/users', {\n        method: 'POST',\n        body: JSON.stringify({\n            name,\n            email,\n            password\n        })\n    });\n    const data = await response.json();\n    storeCurrentUser(data.user);\n    dispatch(setCurrentUser(data.user));\n    return response;\n};\n\nexport const logout = () => async dispatch => {\n    const response = await csrfFetch('api/session', {\n        method: 'DELETE'\n    });\n    storeCurrentUser(null);\n    dispatch(removeCurrentUser());\n    return response;\n};\n\nexport const restoreSession = () => async dispatch => {\n    const response = await csrfFetch('api/session');\n    storeCSRFToken(response);\n    const data = await response.json();\n    storeCurrentUser(data.user);\n    dispatch(setCurrentUser(data.user));\n    return response;\n};\n\nconst initialState = { \n    user: JSON.parse(sessionStorage.getItem('currentUser'))\n};\n\nconst sessionReducer = (state = initialState, action) => { \n    switch(action.type) { \n        case SET_CURRENT_USER:\n            return {...state, user: action.payload};\n        case REMOVE_CURRENT_USER:\n            return {...state, user: null};\n        default:\n            return state;\n    }\n}\n\nexport default sessionReducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
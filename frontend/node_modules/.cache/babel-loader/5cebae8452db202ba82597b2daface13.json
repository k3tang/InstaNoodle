{"ast":null,"code":"async function csrfFetch(url) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  options.method = options.method || 'GET';\n  options.headers = options.headers || {};\n\n  if (options.method.toUpperCase() !== 'GET') {\n    options.headers['Content-Type'] = options.headers['Content-Type'] || 'application/json';\n    options.headers['X-CSRF-Token'] = sessionStorage.getItem('X-CSRF-Token');\n  }\n\n  if (options.method.toUpperCase() !== 'GET') {\n    options.headers['Content-Type'] = options.headers['Content-Type'] || 'application/json';\n    options.headers['X-CSRF-Token'] = sessionStorage.getItem('X-CSRF-Token');\n  }\n\n  const res = await fetch(url, options);\n  if (res.status >= 400) throw res;\n  return res;\n}\n\nexport function storeCSRFToken(response) {\n  const csrfToken = response.headers.get('X-CSRF-Token');\n  if (csrfToken) sessionStorage.setItem('X-CSRF-Token', csrfToken);\n}\nexport async function restoreCSRF() {\n  const response = await csrfFetch('/api/session');\n  storeCSRFToken(response);\n  return response;\n}\nexport default csrfFetch;","map":{"version":3,"names":["csrfFetch","url","options","method","headers","toUpperCase","sessionStorage","getItem","res","fetch","status","storeCSRFToken","response","csrfToken","get","setItem","restoreCSRF"],"sources":["/Users/karentang/Desktop/App_Academy/InstaNoodles/frontend/src/store/csrf.js"],"sourcesContent":["\nasync function csrfFetch(url, options = {}) {\n    options.method = options.method || 'GET';\n    options.headers = options.headers || {};\n\n    if (options.method.toUpperCase() !== 'GET') {\n        options.headers['Content-Type'] =\n            options.headers['Content-Type'] || 'application/json';\n        options.headers['X-CSRF-Token'] = sessionStorage.getItem('X-CSRF-Token');\n    }\n\n    if (options.method.toUpperCase() !== 'GET') {\n        options.headers['Content-Type'] =\n            options.headers['Content-Type'] || 'application/json';\n        options.headers['X-CSRF-Token'] = sessionStorage.getItem('X-CSRF-Token');\n    }\n\n    const res = await fetch(url, options);\n\n    if (res.status >= 400) throw res;\n\n    return res\n\n\n}\nexport function storeCSRFToken(response){\n    const csrfToken = response.headers.get('X-CSRF-Token');\n    if (csrfToken) sessionStorage.setItem('X-CSRF-Token', csrfToken)\n}\n\nexport async function restoreCSRF(){\n    const response = await csrfFetch('/api/session')\n    storeCSRFToken(response);\n    return response;\n}\n\nexport default csrfFetch;"],"mappings":"AACA,eAAeA,SAAf,CAAyBC,GAAzB,EAA4C;EAAA,IAAdC,OAAc,uEAAJ,EAAI;EACxCA,OAAO,CAACC,MAAR,GAAiBD,OAAO,CAACC,MAAR,IAAkB,KAAnC;EACAD,OAAO,CAACE,OAAR,GAAkBF,OAAO,CAACE,OAAR,IAAmB,EAArC;;EAEA,IAAIF,OAAO,CAACC,MAAR,CAAeE,WAAf,OAAiC,KAArC,EAA4C;IACxCH,OAAO,CAACE,OAAR,CAAgB,cAAhB,IACIF,OAAO,CAACE,OAAR,CAAgB,cAAhB,KAAmC,kBADvC;IAEAF,OAAO,CAACE,OAAR,CAAgB,cAAhB,IAAkCE,cAAc,CAACC,OAAf,CAAuB,cAAvB,CAAlC;EACH;;EAED,IAAIL,OAAO,CAACC,MAAR,CAAeE,WAAf,OAAiC,KAArC,EAA4C;IACxCH,OAAO,CAACE,OAAR,CAAgB,cAAhB,IACIF,OAAO,CAACE,OAAR,CAAgB,cAAhB,KAAmC,kBADvC;IAEAF,OAAO,CAACE,OAAR,CAAgB,cAAhB,IAAkCE,cAAc,CAACC,OAAf,CAAuB,cAAvB,CAAlC;EACH;;EAED,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAACR,GAAD,EAAMC,OAAN,CAAvB;EAEA,IAAIM,GAAG,CAACE,MAAJ,IAAc,GAAlB,EAAuB,MAAMF,GAAN;EAEvB,OAAOA,GAAP;AAGH;;AACD,OAAO,SAASG,cAAT,CAAwBC,QAAxB,EAAiC;EACpC,MAAMC,SAAS,GAAGD,QAAQ,CAACR,OAAT,CAAiBU,GAAjB,CAAqB,cAArB,CAAlB;EACA,IAAID,SAAJ,EAAeP,cAAc,CAACS,OAAf,CAAuB,cAAvB,EAAuCF,SAAvC;AAClB;AAED,OAAO,eAAeG,WAAf,GAA4B;EAC/B,MAAMJ,QAAQ,GAAG,MAAMZ,SAAS,CAAC,cAAD,CAAhC;EACAW,cAAc,CAACC,QAAD,CAAd;EACA,OAAOA,QAAP;AACH;AAED,eAAeZ,SAAf"},"metadata":{},"sourceType":"module"}